# gridbot.gridlang

  CALL << @init

@forever
  CALL << @act
  GOTO << @forever

@act
  CALL << @consume
  IFFGOTO << @getdirection
  RETURN
@getdirection
  CALL << @moveindex
  PEEK
  DUP
  IFFGOTO << @random
  CALL << @domove
  POP
  RETURN
@random
  POP
  RAND << 3
  ADD << 256
  PEEK
  CALL << @domove
  POP
  RETURN

@consume
  # try pulls
  CALL << @NORTH @dopull
  IFTGOTO << @success
  CALL << @EAST @dopull
  IFTGOTO << @success
  CALL << @SOUTH @dopull
  IFTGOTO << @success
  CALL << @WEST @dopull
  IFTGOTO << @success

  # try punches
  CALL << @NORTH @dopunch
  IFTGOTO << @success
  CALL << @EAST @dopunch
  IFTGOTO << @success
  CALL << @SOUTH @dopunch
  IFTGOTO << @success
  CALL << @WEST @dopunch
  IFTGOTO << @success

  PUSH 0
  RETURN
@success
  PUSH 1
  RETURN

@moveindex
  # bits: n, ne, e, se, s, sw, w, nw
  # n*128 + ne*64 + e*32 + se*16 + s*8 + sw*4 + w*2 + nw
  # n
  CALLFF << @SCAN 0 -2 3
  EQUAL << @CELL_RESOURCE
  MUL << 128
  # ne
  CALLFF << @SCAN 1 -1 3
  EQUAL << @CELL_RESOURCE
  MUL << 64
  ADD
  # e
  CALLFF << @SCAN 2 0 3
  EQUAL << @CELL_RESOURCE
  MUL << 32
  ADD
  # se
  CALLFF << @SCAN 1 1 3
  EQUAL << @CELL_RESOURCE
  MUL << 16
  ADD
  # s
  CALLFF << @SCAN 0 2 3
  EQUAL << @CELL_RESOURCE
  MUL << 8
  ADD
  # sw
  CALLFF << @SCAN -1 1 3
  EQUAL << @CELL_RESOURCE
  MUL << 4
  ADD
  # w
  CALLFF << @SCAN -2 0 3
  EQUAL << @CELL_RESOURCE
  MUL << 2
  ADD
  # nw
  CALLFF << @SCAN -1 -1 3
  EQUAL << @CELL_RESOURCE
  ADD
  RETURN


@dopunch  # direction
  # look before punching
  PUSH @LOOK
  PEEK << -2
  CALLFF << 2
  EQUAL << @CELL_ROBOT
  IFTGOTO << @foundrobot
  POP
  PUSH 0
  RETURN
@foundrobot
  PUSH @PUNCH
  SWAP
  CALLFF << 2
  RETURN

@dopull
  # look before pulling
  PUSH @LOOK
  PEEK << -2
  CALLFF << 2
  EQUAL << @CELL_RESOURCE
  IFTGOTO << @foundresource
  POP
  PUSH 0
  RETURN
@foundresource
  PUSH @PULL
  SWAP
  CALLFF << 2
  RETURN

@domove
  # look before moving
  PUSH @LOOK
  PEEK << -2
  CALLFF << 2
  EQUAL << @CELL_EMPTY
  IFTGOTO << @foundempty
  # destination not empty, try pushing
  PUSH @PUSH
  SWAP
  CALLFF << 2
  # if the push fails, give up
  IFFGOTO << @die
  PUSH 1
  RETURN
@foundempty
  PUSH @MOVE
  SWAP
  CALLFF << 2
  RETURN
@die
  # die and reappear somewhere else
  CALLFF << @SELFDESTRUCT 1 2
  RETURN


@init
  # movetable [0..255]
  PUSH 0
  PUSH @NORTH
  PUSH @WEST
  PUSH @WEST
  PUSH @WEST
  PUSH @WEST
  PUSH @WEST
  PUSH @WEST
  PUSH @SOUTH
  PUSH @NORTH
  PUSH @WEST
  PUSH @WEST
  PUSH @SOUTH
  PUSH @WEST
  PUSH @WEST
  PUSH @WEST
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @WEST
  PUSH @SOUTH
  PUSH @WEST
  PUSH @WEST
  PUSH @WEST
  PUSH @SOUTH
  PUSH @SOUTH
  PUSH @SOUTH
  PUSH @WEST
  PUSH @SOUTH
  PUSH @SOUTH
  PUSH @SOUTH
  PUSH @WEST
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @WEST
  PUSH @EAST
  PUSH @WEST
  PUSH @WEST
  PUSH @WEST
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @WEST
  PUSH @SOUTH
  PUSH @WEST
  PUSH @WEST
  PUSH @WEST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @WEST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @SOUTH
  PUSH @SOUTH
  PUSH @SOUTH
  PUSH @WEST
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @WEST
  PUSH @WEST
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @SOUTH
  PUSH @NORTH
  PUSH @WEST
  PUSH @WEST
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @WEST
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @SOUTH
  PUSH @SOUTH
  PUSH @SOUTH
  PUSH @WEST
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @WEST
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @WEST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @EAST
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @WEST
  PUSH @WEST
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @SOUTH
  PUSH @NORTH
  PUSH @WEST
  PUSH @WEST
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @SOUTH
  PUSH @NORTH
  PUSH @WEST
  PUSH @WEST
  PUSH @SOUTH
  PUSH @NORTH
  PUSH @SOUTH
  PUSH @NORTH
  PUSH @SOUTH
  PUSH @SOUTH
  PUSH @SOUTH
  PUSH @WEST
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @WEST
  PUSH @WEST
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @SOUTH
  PUSH @NORTH
  PUSH @WEST
  PUSH @WEST
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @WEST
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @SOUTH
  PUSH @SOUTH
  PUSH @SOUTH
  PUSH @WEST
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @SOUTH
  PUSH @NORTH
  PUSH @SOUTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH
  PUSH @EAST
  PUSH @NORTH

  # dirtable [256..259]
  PUSH @NORTH
  PUSH @EAST
  PUSH @WEST
  PUSH @SOUTH

  RETURN
